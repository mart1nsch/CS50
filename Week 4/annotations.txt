* Hexadecimal
    - When it's a hexadecimal bit, we use 0x in the front of the number of that bite tu understand that it's hexadecimal, like 0x10

* Pointers
    - With C, we can get the addresses that a variable is stored in the computer
    - With the address, we can get the value of the address and play around with the pointer it-self

* Strings
    - A string actually stores the address of the first character on the memory of that string
    - With the firts address, it can print all of the string making a while loop until the logic found the NUL character, AKA \0
    - In C, if we whant to use a string, we don't use the string type, we declare a type like this:
        + typedef char * string;
        + And after that, we know the address for the first character of the string
        + With the first character, we can loop until we found the NUL character in a position, that way, we can print all of the string;
    - To make a string without the cs50 library, we can use this:
        + #include <stdio.h>
          
          int main(void)
          {
              typedef char *string;

              string test = "Teste";

              printf("%s\n", test);

              printf("%c\n", test[2]);
          }
    - Or we can use like this:
        + #include <stdio.h>
          
          int main(void)
          {
              char *test = "Teste";

              printf("%s\n", test);

              printf("%c\n", test[2]);
          }
    - Because of it, we never can use == to compare strings, because you is going to compare two addresses, and not the actually string
    - When you try to copy a string using char *t = s, it won't work, because you are actually coping the address and not the string

* Malloc
    - Malloc is a function that allocate memory for us
    - It goes to the computer and asks for memory
    - We can store it in a variable, for exemple, to copy a string
    - After we use the memory and don't need it anymore, we need to handle back to the computer that memory, so we don't have memory leeks, using free()
    - A exemplo of use:
        + #include <cs50.h>
          #include <stdio.h>
          #include <stdlib.h>
          #include <string.h>
  
          int main(void)
          {
              char *s = get_string("s: ");
  
              char *t = malloc(strlen(s) + 1);
  
              if (t == NULL)
              {
                  return 1;
              }
  
              strcpy(t, s);
  
              free(t);
          }

* Scanf
    - Scanf is used to recieve a value from the user
    - To get a int value from the user, we can use this:
        + #include <stdio.h>
          
          int main(void)
          {
              int n;
              printf("n: ");
              scanf("%i", &n);
              printf("n: %i\n", n);
          }
    - The first argument is the type of value we want, and the second argument is the pointer of variable that will recieve the value from the user

* Files
    - We can manage files with some functions already in C, like, fopen, fprintf, fclose, fwrite, etc.
    - To open a file and write in it, we can use this:
        + #include <cs50.h>
          #include <stdio.h>
          #include <string.h>
  
          int main(void)
          {
              FILE *file = fopen("file.txt", "a");

              if (file == NULL)
              {
                  return 1;
              }
  
              char *name = get_string("Name: ");
              char *number = get_string("Number: ");
  
              fprintf(file, "%s,%s\n", name, number);
  
              fclose(file);
          }
    - To copy a file bit by bit, we can to this:
        + #include <stdio.h>
          #include <stdint.h>

          typedef uint8_t BYTE;
  
          int main(int argc, char *argv[])
          {
              FILE *src = fopen("argv[1]", "rb");
              FILE *dst = fopen("argv[2]", "wb");

              BYTE b;
  
              while (fread(&b, sizeof(b), 1, src) != 0)
              {
                  fwrite(&b, sizeof(b), 1, dst);
              }
  
              fclose(dst);
              fclose(src);
          }